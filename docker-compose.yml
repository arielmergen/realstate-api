version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: real-estate-postgres
    environment:
      POSTGRES_DB: realstate_db
      POSTGRES_USER: realstate
      POSTGRES_PASSWORD: realstate123
      # Configuración de performance
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - real-estate-network
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c effective_cache_size=1GB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U realstate -d realstate_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  api:
    build: .
    container_name: realstate-api
    ports:
      - "3002:5000"
    environment:
      - DATABASE_URL=postgresql://realstate:realstate123@postgres:5432/realstate_db?connection_limit=50&pool_timeout=60&idle_timeout=30000&connect_timeout=10000&statement_timeout=30000&query_timeout=30000
      - JWT_SECRET=realstate-local-secret-key-2024
      - TOKEN_VALIDITY_TIME=24
      - TOKEN_VALIDITY_UNITS=h
      - REFRESH_TOKEN_VALIDITY_TIME=7
      - REFRESH_TOKEN_VALIDITY_UNITS=d
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - PORT=5000
      - NODE_ENV=development
      # Configuración optimizada de Node.js
      - NODE_OPTIONS=--max-old-space-size=1024 --max-http-header-size=16384
      # Variables adicionales para estabilidad
      - UV_THREADPOOL_SIZE=8
      - NODE_MAX_CONCURRENT_CONNECTIONS=2000
      # Keep-alive settings
      - HTTP_KEEP_ALIVE_TIMEOUT=65000
      - HTTP_HEADERS_TIMEOUT=66000
      # Rate limiting settings
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX=1000
      - RATE_LIMIT_STRICT_MAX=60
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
      # Volume para logs
      - ./logs:/app/logs
    networks:
      - real-estate-network
    # Comando simplificado
    command: npm run start:dev
    # Política de reinicio más agresiva
    restart: always
    # Health check menos agresivo
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "3", "--connect-timeout", "2", "http://localhost:5000/health-check"]
      interval: 45s
      timeout: 10s
      retries: 2
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.5'
        reservations:
          memory: 768M
          cpus: '0.75'
    # Configuración adicional para estabilidad
    stop_grace_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:

networks:
  real-estate-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: real-estate-br0