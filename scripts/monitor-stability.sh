#!/bin/bash

# Script de monitoreo de estabilidad para la API RealState
# Detecta problemas de memoria y reinicia autom√°ticamente si es necesario

API_CONTAINER="realstate-api"
MEMORY_THRESHOLD=85  # Porcentaje de memoria que activa el reinicio
CHECK_INTERVAL=60    # Segundos entre verificaciones

echo "üîç Iniciando monitoreo de estabilidad para $API_CONTAINER"
echo "üìä Umbral de memoria: ${MEMORY_THRESHOLD}%"
echo "‚è±Ô∏è  Intervalo de verificaci√≥n: ${CHECK_INTERVAL}s"
echo ""

while true; do
    # Verificar si el contenedor est√° ejecut√°ndose
    if ! docker ps | grep -q "$API_CONTAINER"; then
        echo "‚ùå $(date): Contenedor $API_CONTAINER no est√° ejecut√°ndose. Reiniciando..."
        docker-compose up -d api
        sleep 30
        continue
    fi
    
    # Obtener estad√≠sticas de memoria
    MEMORY_USAGE=$(docker stats --no-stream --format "table {{.MemPerc}}" $API_CONTAINER | tail -n 1 | sed 's/%//')
    
    # Verificar si la memoria est√° por encima del umbral
    if (( $(echo "$MEMORY_USAGE > $MEMORY_THRESHOLD" | bc -l) )); then
        echo "‚ö†Ô∏è  $(date): Uso de memoria alto: ${MEMORY_USAGE}% (umbral: ${MEMORY_THRESHOLD}%)"
        echo "üîÑ Reiniciando contenedor para liberar memoria..."
        
        # Reiniciar el contenedor
        docker-compose restart api
        
        # Esperar a que se estabilice
        echo "‚è≥ Esperando estabilizaci√≥n..."
        sleep 60
        
        # Verificar que est√© funcionando
        if curl -f http://localhost:3002/health-check > /dev/null 2>&1; then
            echo "‚úÖ $(date): Contenedor reiniciado exitosamente"
        else
            echo "‚ùå $(date): Error al reiniciar contenedor"
        fi
    else
        echo "‚úÖ $(date): Memoria OK: ${MEMORY_USAGE}%"
    fi
    
    # Verificar conectividad
    if ! curl -f http://localhost:3002/health-check > /dev/null 2>&1; then
        echo "‚ùå $(date): API no responde. Reiniciando..."
        docker-compose restart api
        sleep 30
    fi
    
    sleep $CHECK_INTERVAL
done
